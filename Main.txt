import statements necessary for building the GUI using Swing components. It defines the main class HealthAppGUI and the main method, 
which serves as the entry point of the application. It creates a JFrame for the BMI Calculator, 
sets the close operation, size, and layout of the frame.

Import Statements:
•	javax.swing.*: Imports all classes from the Swing package, which is used for creating the GUI components.
•	java.awt.*: Imports all classes from the AWT package, which provides classes for the GUI's layout and events.
•	java.awt.event.ActionEvent and java.awt.event.ActionListener: Import specific classes needed to handle action events like button clicks. 

Class Definition:
•	public class HealthAppGUI: Defines the main class of the application named HealthAppGUI.

Main Method:
•	public static void main(String[] args): The entry point of the Java application. This is where the program starts executing.

Creating the Frame:
•	JFrame frame = new JFrame("BMI Calculator"): Creates a new JFrame window with the title "BMI Calculator".
•	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE): Ensures the application exits when the window is closed.
•	frame.setSize(400, 300): Sets the size of the window to 400 pixels wide and 300 pixels tall.
•	frame.setLayout(new GridLayout(7, 1)): Sets the layout manager for the frame to a GridLayout with 7 rows and 1 column, arranging 
  components vertically in a single column.
This part sets up an action listener for the "Calculate" button. When the button is pressed, it retrieves the user input from the text fields, calculates the BMI, determines the BMI category, and provides appropriate advice. It handles potential input errors with a try-catch block and updates the result and advice labels accordingly. Finally, it sets the frame to be visible.

•  Action Listener for the Button:
•	calculateButton.addActionListener(new ActionListener() { ... }): Attaches an anonymous ActionListener to the calculate button. This listener defines what happens when the button is clicked.
•	Handling Button Click:
o	public void actionPerformed(ActionEvent e): This method is called when the button is clicked.
o	Parsing Input Values:
	double height = Double.parseDouble(heightField.getText()): Retrieves the text from the height field, parses it as a double, and stores it in the variable height.
	double weight = Double.parseDouble(weightField.getText()): Retrieves the text from the weight field, parses it as a double, and stores it in the variable weight.
o	Calculating BMI:
	double bmi = calculateBMI(weight, height): Calls the calculateBMI method with the weight and height values, and stores the result in the variable bmi.
	resultLabel.setText("Your BMI is: " + String.format("%.2f", bmi)): Updates the result label to display the calculated BMI, formatted to two decimal places.
o	Determining BMI Category and Providing Advice:
	String category = determineBMICategory(bmi): Calls the determineBMICategory method with the BMI value to get the BMI category.
	String advice = getMealPlanAndExercise(category): Calls the getMealPlanAndExercise method with the BMI category to get meal plan and exercise advice.
	adviceLabel.setText("<html>" + advice.replace("\n", "<br>") + "</html>"): Updates the advice label with the advice, converting newlines to HTML line breaks for proper formatting.
o	Handling Input Errors:
	catch (NumberFormatException ex): Catches any NumberFormatException that occurs if the user input is not a valid number.
	resultLabel.setText("Please enter valid numbers."): Updates the result label with an error message.
	adviceLabel.setText(""): Clears the advice label.\
•  Displaying the Frame:
•	frame.setVisible(true): Makes the frame visible, displaying the GUI to the user. This should be done after all components have been added and configured
This part defines a method calculateBMI that takes weight and height as parameters and returns the BMI value calculated using the formula: weight divided by the square of the height.
